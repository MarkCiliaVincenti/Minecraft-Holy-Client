using SourceGenerator.ProtoDefTypes;
using System.Text;

public sealed class ProtocolSourceGenerator
{
	public Protocol Protocol { get; set; }
	public string Version { get; set; }

	public async Task GenerateTo(Stream stream)
	{
		using (StreamWriter streamWriter = new StreamWriter(stream))
		{
			string content = GenerateCore();
			await streamWriter.WriteAsync(content);
		}
	}




	private string GenerateCore()
	{
		foreach ((string nsName, Namespace side) in Protocol.Namespaces)
		{
			var serverPackets = side.Types["toClient"] as Namespace;
			var clientPackets = side.Types["toServer"] as Namespace;

			if (nsName == "play")
			{
				var methods = GenerateSendMethods(clientPackets);

				StringBuilder builder = new StringBuilder();

				builder.AppendLine("/// Generated by Titlehhhh");
				builder.AppendLine();
				builder.AppendLine("namespace Test;");
				builder.AppendLine();
				builder.AppendLine($"public partial sealed class Protocol_{Version}");
				builder.AppendLine("{");

				foreach (var method in methods)
				{
					string formatted = string.Join("", method.Select(x => "\t" + x + Environment.NewLine));

					builder.AppendLine(formatted);
					builder.AppendLine();
				}

				builder.AppendLine("}");

				return builder.ToString();
			}
		}

		return "WTF";
	}
	private static int AnonId = 0;
	private List<string[]> GenerateSendMethods(IEnumerable<KeyValuePair<string, ProtodefType>> types)
	{

		List<string[]> result = new();

		foreach ((string name, ProtodefType type) in types)
		{
			if (name != "packet")
			{

				bool isSkip = false;
				ProtodefContainer fields = type as ProtodefContainer;


				if (fields.IsAllFieldsPrimitive())
				{
					string method = name.Substring("packet".Length);
					method = $"Send{method.ToPascalCase()}";

					List<string> arguments = new List<string>();

					foreach (var field in fields)
					{
						string argName = field.Anon == true ? $"anon_{AnonId++}" : field.Name.ToCamelCase();

						string? netType = field.Type.GetNetType();
						if (netType is null)
						{
							isSkip = true;
							break;
							throw new InvalidOperationException(".Net type in null for " + field);
						}

						arguments.Add(netType + " " + argName);
					}

					method += $"({string.Join(", ", arguments)})";

					if (isSkip)
					{
						continue;
					}

					string[] item =
					{
						$"public Task {method}",
						"{",
						"\tthrow new NotImplementedException();",
						"}"
					};


					result.Add(item);
				}
			}
		}

		return result;
	}


	private ServerPacketGenerationResult GenerateEvents(IEnumerable<KeyValuePair<string, ProtodefType>> types)
	{
		List<string> classes = new();
		List<string> props = new();


		foreach ((string name, ProtodefType type) in types)
		{
			if (name != "packet")
			{

				bool isSkip = false;
				ProtodefContainer fields = type as ProtodefContainer;

				if (fields.IsAllFieldsPrimitive())
				{
					string className = name.Substring("packet".Length).ToPascalCase();

					

					StringBuilder classBuilder = new StringBuilder();

					classBuilder
						.AppendLine($"public sealed class {className}")
						.AppendLine("{");

					foreach (var field in fields)
					{
						string nameProp = field.Anon == true ? $"Anon_{AnonId++}" : field.Name.ToPascalCase();

						string? netType = field.Type.GetNetType();
						if (netType is null)
						{
							isSkip = true;
							break;
						}


						classBuilder.AppendLine($"\t{netType} {nameProp} {{ get; set; }}");



					}


					classBuilder.AppendLine("}");

					classes.Add(classBuilder.ToString());

					string propName = className + "PacketObservable";

					props.Add($"public IObservable<{className}> {propName} {{ get; private set; }}");

				}

			}
		}


		return new ServerPacketGenerationResult(classes, props);
	}

	private static string FieldToNetType(ProtodefContainerField field)
	{
		return field.Type.GetNetType();
	}

}

internal class ServerPacketGenerationResult
{
	public List<string> Classes { get; }

	public List<string> Properties { get; }

	public ServerPacketGenerationResult(List<string> classes, List<string> properties)
	{
		Classes = classes;
		Properties = properties;
	}
}


