using SourceGenerator.ProtoDefTypes;
using System.Diagnostics;
using System.Text;
using Humanizer;

public sealed class ProtocolSourceGenerator
{
	public Protocol Protocol { get; set; }
	public string Version { get; set; }






	public Dictionary<string, string> Generate()
	{
		Dictionary<string, string> result = new();


		foreach ((string nsName, Namespace side) in Protocol.Namespaces)
		{
			var serverPackets = side.Types["toClient"] as Namespace;
			var clientPackets = side.Types["toServer"] as Namespace;

			if (nsName == "play")
			{
				var methods = GenerateSendMethods(clientPackets.Types);

				var events = GenerateEvents(serverPackets);

				StringBuilder builder = new StringBuilder();

				builder.AppendLine("/// Generated by Titlehhhh");
				builder.AppendLine();
				builder.AppendLine("namespace Test;");
				builder.AppendLine();
				builder.AppendLine($"public partial sealed class Protocol_{Version}");
				builder.AppendLine("{");

				foreach (var receiveProp in events.Properties)
				{
					string formatted = "\t" + receiveProp;
					builder.AppendLine(formatted);
					builder.AppendLine();
				}

				foreach (var sendMethod in methods)
				{
					string formatted = string.Join("", sendMethod.Select(x => "\t" + x + Environment.NewLine));

					builder.AppendLine(formatted);
					builder.AppendLine();
				}

				builder.AppendLine("}");

				builder.AppendLine();

				foreach (var eventClass in events.Classes)
				{
					builder.AppendLine(eventClass);
					builder.AppendLine();
				}
			}
		}

	}
	private static int AnonId = 0;
	private List<string[]> GenerateSendMethods(Dictionary<string, ProtodefType> types)
	{

		List<string[]> result = new();

		ProtodefType IdMap = types["packet"];


		foreach ((string name, ProtodefType type) in types)
		{
			if (name != "packet")
			{

				bool isSkip = false;
				ProtodefContainer fields = type as ProtodefContainer;

			}
		}

		return result;
	}


	private ServerPacketGenerationResult GenerateEvents(IEnumerable<KeyValuePair<string, ProtodefType>> types)
	{
		List<string> classes = new();
		List<string> props = new();


		foreach ((string name, ProtodefType type) in types)
		{
			if (name != "packet")
			{

				bool isSkip = false;
				ProtodefContainer fields = type as ProtodefContainer;


			}
			else
			{

			}
		}


		return new ServerPacketGenerationResult(classes, props);
	}

	private static string FieldToNetType(ProtodefContainerField field)
	{
		return field.Type.GetNetType();
	}

}

internal class ServerPacketGenerationResult
{
	public List<string> Classes { get; }

	public List<string> Properties { get; }

	public ServerPacketGenerationResult(List<string> classes, List<string> properties)
	{
		Classes = classes;
		Properties = properties;
	}
}


public static class Mappings
{

}

