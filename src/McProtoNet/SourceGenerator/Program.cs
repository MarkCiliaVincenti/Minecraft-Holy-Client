using SourceGenerator.ProtoDefTypes;
using System.Text;


internal class Program
{
	private static async Task Main(string[] args)
	{


		using var sr = new StreamReader("protocol.json");


		string json = sr.ReadToEnd();


		Protocol proto = new ProtodefParser(json).Parse();


		var toServerPackets = (proto.Namespaces["play"].Types["toClient"] as Namespace);

		string outDir = @"C:\Users\Title\source\repos\Minecraft-Holy-Client\src\McProtoNet\TestGenerator";

		

		//Console.ReadLine();
	}


}

public class PacketsGenerator
{
	private readonly Dictionary<string, ProtodefType> packets;

	public PacketsGenerator(Dictionary<string, ProtodefType> packets)
	{
		this.packets = packets;
	}

	public async Task Generate(string dir)
	{

	}
}

public class ProtocolGenerator
{
	private readonly Namespace _namespace;
	private readonly string _version;
	private readonly int _numberVersion;
	public ProtocolGenerator(Namespace ns, string version, int numberVersion)
	{
		_namespace = ns;
		_numberVersion = numberVersion;
		_version = version;
	}

	public async Task Generate()
	{
		

		string fileHeader = new StringBuilder()
			.AppendLine("// Generated by Titlehhhh")
			.ToString();

		string namespaceName = $"McProtoNet.Protocol_{_numberVersion}";


	}
}

public class TypesGenerator
{

}

public sealed class NetClass
{
	public Dictionary<string, string> Fields { get; set; } = new();
	public string Name { get; set; }
	public string Generate()
	{
		StringBuilder builder = new StringBuilder();

		builder.AppendLine("//AutoGenerated")
			.AppendLine()
			.AppendLine("namespace McProtoNet.Packets;")
			.AppendLine()
			.AppendLine($"public sealed class {Name}")
			.AppendLine("{");
		GenerateFileds(builder);

		builder.AppendLine("}");

		return builder.ToString();


	}
	private void GenerateFileds(StringBuilder builder)
	{
		foreach (var (name, type) in Fields)
		{
			string prop = $"public {type} {name} {{ get; set; }}";
			builder.AppendLine("\t" + prop);
		}
	}
}
